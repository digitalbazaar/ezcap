# ezcap

[![Node.js CI](https://github.com/digitalbazaar/ezcap/workflows/Node.js%20CI/badge.svg)](https://github.com/digitalbazaar/ezcap/actions?query=workflow%3A%22Node.js+CI%22)

> An easy to use, opinionated Authorization Capabilities (zcap) client library
> for the browser and Node.js.

## Table of Contents

- [Background](#background)
- [Security](#security)
- [Install](#install)
- [Usage](#usage)
- [API Reference](#api-reference)
- [Contribute](#contribute)
- [Commercial Support](#commercial-support)
- [License](#license)

## Background

This library provides a client that browser and node.js applications can use to
interact with HTTP servers protected by zcap-based authorization. The library
is configured with secure and sensible defaults to help developers get started
quickly and ensure that their client code is production-ready.

## Core Principles

The ezcap library is opinionated in order to make using zcaps a pleasant
experience for developers. To do this, it builds upon two fundamental
principles:

* Most systems using HTTP are REST-ful in nature; that property should be
  used to our advantage.
* Most systems REST-ful systems tend to center around reading and writing
  resources.

If these principles do not apply to your system, the
[zcapld](https://github.com/digitalbazaar/zcapld) library might
be a better, albeit more complex, solution for you.

Looking at each of these core principles more closely will help explain how
zcaps are a good fit for HTTP architectures. Let's take the first principle
and break it down:

> Most systems using HTTP are REST-ful in nature

That typically means that most resource URLs are organized by collections and
items. For example: `/<root-namespace>/<collection-id>/<item-id>`. In practice,
this tends to look like `/my-account/components/1`.

## Security

The security characteristics of this library are largely influenced by design
that implementers make with respect to private key management. The security
characteristics of the server that you communicate with using this library
are largely dependent on how carefully the server manages zcap registrations,
zcap delegations, and zcap checking. Bugs or failures related to key management,
or enforcement of zcaps will lead to security failures. It is imperative that
implementers audit their implementations, preferably by parties other than
the implementer.

## Install

- Node.js 12+ is required.

To install locally (for development):

```
git clone https://github.com/digitalbazaar/ezcap.git
cd ezcap
npm install
```

## Usage

* [Creating a Client](#creating-a-client)
* [Reading with a Root Capability](#reading-with-a-root-capability)
* [Writing with a Root Capability](#writing-with-a-root-capability)
* [Delegating a Capability](#delegating-a-capability)
* [Reading with a Delegated Capability](#reading-with-a-delegated-capability)
* [Writing with a Delegated Capability](#writing-with-a-delegated-capability)
* [Requesting with a Root Capability](#requesting-with-a-root-capability)
* [Requesting with a Delegated Capability](#requesting-with-a-delegated-capability)

### Creating a Client

Creating a zcap client involves generating cryptographic key material and then
using that key material to instantiate a client designed to operate on a
specific base URL.

```js
import {ZcapClient} from 'ezcap';
import didKey from 'did-method-key';
const didKeyDriver = didKey.driver();

// the base URL for the zcap client to operate against
const baseUrl = 'https://zcap.example';

// generate a DID Document and set of key pairs
const {didDocument, keyPairs} = await didKeyDriver.generate();

// create a new zcap client using the generated cryptographic material
const zcapClient = new ZcapClient({baseUrl, didDocument, keyPairs});
```

### Reading with a Root Capability

Reading data from a URL using a capability is performed in a way that is
very similar to using a regular HTTP client to perform an HTTP GET. Using
a root capability means that your client has been directly authorized to access
the URL, usually because it created the resource that is being accessed.
The term "root" means that your client is the "root of authority".

```js
const url = '/my-account/items';

// reading a URL using a zcap will result in an HTTP Response
const response = await zcapClient.read({url});

// retrieve the JSON data
const items = await response.json();
```

### Writing with a Root Capability

Writing data to URL using a capability is performed in a way that is
very similar to using a regular HTTP client to perform an HTTP POST. Using
a root capability means that your client has been directly authorized to
modify the resource at the URL, usually because it created the resource that is
being written to. The term "root" means that your client is the "root of
authority". In the example below, the server most likely registered the
client as being the root authority for the `/my-account` path on the server.

```js
const url = '/my-account/items';
const item = {label: 'Widget'};

// writing a URL using a zcap will result in an HTTP Response
const response = await zcapClient.write({url, json: item});

// process the response appropriately
const writtenItem = await response.json();
```

### Delegating a Capability

Delegating a capability consists of the client authorizing another entity to
use the capability. The example below uses a DID as the target for the
delegation. The returned `delegatedCapability` would need to be transmitted
to the entity identified by the delegation target so that they can use it
to access the resource.

```js
const capability = 'https://zcap.example/my-account/items';
const targetDelegate =
  'did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH';
const allowedActions = ['read'];
const delegatedCapability = zcapClient.delegate({capability, targetDelegate, allowedActions});
```

### Reading with a Delegated Capability

Reading with a delegated capability is similar to reading with a root
capability. The only difference is that the delegated capability needs to be
retrieved from somewhere using application-specific code and then passed
to the `read` method.

```js
const url = '/my-account/items/123';
const capability = await getCapabilityFromDatabase({url}); // defined by your code

// reading a URL using a zcap will result in an HTTP Response
const response = await zcapClient.read({url, capability});

// retrieve the JSON data
const items = await response.json();
```

### Writing with a Delegated Capability

Writing with a delegated capability is similar to writing with a root
capability. The only difference is that the delegated capability needs to be
retrieved from somewhere using application-specific code and then passed
to the `write` method.


```js
const url = '/my-account/items';
const item = {label: 'Widget'};
const capability = await getCapabilityFromDatabase({url}); // defined by your code

// writing a URL using a zcap will result in an HTTP Response
const response = await zcapClient.write({url, capability, json: item});

// process the response appropriately
const writtenItem = await response.json();
```

### Requesting with a Root Capability

In the event that the server API does not operate using HTTP GET and HTTP POST,
it is possible to create a zcap client request that uses other HTTP verbs. This
is done by specifying the HTTP `method` to use.

```js
const url = '/my-account/items';
const item = {count: 12};

// send a request to a URL by invoking a capability
const response = await zcapClient.request({url, method: 'patch', json: item});

// process the response appropriately
const updatedItem = await response.json();
```

### Requesting with a Delegated Capability

Performing an HTTP request with a delegated capability is similar to
doing the same with a root capability. The only difference is that the
delegated capability needs to be retrieved from somewhere using application-specific code and then passed to the `request` method.

```js
const url = '/my-account/items/123';
const item = {count: 12};
const capability = await getCapabilityFromDatabase({url}); // defined by your code

// invoking a capability against a URL will result in an HTTP Response
const response = await zcapClient.request({url, capability, method: 'patch', json: item});

// process the response appropriately
const updatedItem = await response.json();
```

## API Reference

{{>main}}

## Contribute

See [the contribute file](https://github.com/digitalbazaar/bedrock/blob/master/CONTRIBUTING.md)! PRs accepted.

If editing the README.md, please follow the
[standard-readme](https://github.com/RichardLitt/standard-readme) specification.

## Commercial Support

Commercial support for this library is available upon request from
Digital Bazaar: support@digitalbazaar.com

## License

[New BSD License (3-clause)](LICENSE) Â© Digital Bazaar
